// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chat_mgmt/chat_mgmt.proto

package chat_mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatManagementClient is the client API for ChatManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatManagementClient interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error)
	DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error)
	UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error)
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error)
	LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error)
	KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error)
	CanWriteChat(ctx context.Context, in *CanWriteRequest, opts ...grpc.CallOption) (*CanWriteResponse, error)
	MakeChatAdmin(ctx context.Context, in *MakeAdminRequest, opts ...grpc.CallOption) (*ChatRoomWithAdminsResponse, error)
	DeleteChatAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*ChatRoomWithAdminsResponse, error)
	IsChatAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error)
	GetChatUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
}

type chatManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewChatManagementClient(cc grpc.ClientConnInterface) ChatManagementClient {
	return &chatManagementClient{cc}
}

func (c *chatManagementClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error) {
	out := new(ChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error) {
	out := new(DeleteChatResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/DeleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error) {
	out := new(ChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/UpdateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error) {
	out := new(ChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/JoinChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error) {
	out := new(ChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/LeaveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error) {
	out := new(ChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/InviteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) KickUser(ctx context.Context, in *KickUserRequest, opts ...grpc.CallOption) (*ChatRoomResponse, error) {
	out := new(ChatRoomResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/KickUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) CanWriteChat(ctx context.Context, in *CanWriteRequest, opts ...grpc.CallOption) (*CanWriteResponse, error) {
	out := new(CanWriteResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/CanWriteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) MakeChatAdmin(ctx context.Context, in *MakeAdminRequest, opts ...grpc.CallOption) (*ChatRoomWithAdminsResponse, error) {
	out := new(ChatRoomWithAdminsResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/MakeChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) DeleteChatAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*ChatRoomWithAdminsResponse, error) {
	out := new(ChatRoomWithAdminsResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/DeleteChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) IsChatAdmin(ctx context.Context, in *IsAdminRequest, opts ...grpc.CallOption) (*IsAdminResponse, error) {
	out := new(IsAdminResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/IsChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatManagementClient) GetChatUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/chat_mgmt.ChatManagement/GetChatUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatManagementServer is the server API for ChatManagement service.
// All implementations must embed UnimplementedChatManagementServer
// for forward compatibility
type ChatManagementServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*ChatRoomResponse, error)
	DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error)
	UpdateChat(context.Context, *UpdateChatRequest) (*ChatRoomResponse, error)
	JoinChat(context.Context, *JoinChatRequest) (*ChatRoomResponse, error)
	LeaveChat(context.Context, *LeaveChatRequest) (*ChatRoomResponse, error)
	InviteUser(context.Context, *InviteUserRequest) (*ChatRoomResponse, error)
	KickUser(context.Context, *KickUserRequest) (*ChatRoomResponse, error)
	CanWriteChat(context.Context, *CanWriteRequest) (*CanWriteResponse, error)
	MakeChatAdmin(context.Context, *MakeAdminRequest) (*ChatRoomWithAdminsResponse, error)
	DeleteChatAdmin(context.Context, *DeleteAdminRequest) (*ChatRoomWithAdminsResponse, error)
	IsChatAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error)
	GetChatUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	mustEmbedUnimplementedChatManagementServer()
}

// UnimplementedChatManagementServer must be embedded to have forward compatible implementations.
type UnimplementedChatManagementServer struct {
}

func (UnimplementedChatManagementServer) CreateChat(context.Context, *CreateChatRequest) (*ChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatManagementServer) DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedChatManagementServer) UpdateChat(context.Context, *UpdateChatRequest) (*ChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChat not implemented")
}
func (UnimplementedChatManagementServer) JoinChat(context.Context, *JoinChatRequest) (*ChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChatManagementServer) LeaveChat(context.Context, *LeaveChatRequest) (*ChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedChatManagementServer) InviteUser(context.Context, *InviteUserRequest) (*ChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedChatManagementServer) KickUser(context.Context, *KickUserRequest) (*ChatRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUser not implemented")
}
func (UnimplementedChatManagementServer) CanWriteChat(context.Context, *CanWriteRequest) (*CanWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanWriteChat not implemented")
}
func (UnimplementedChatManagementServer) MakeChatAdmin(context.Context, *MakeAdminRequest) (*ChatRoomWithAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeChatAdmin not implemented")
}
func (UnimplementedChatManagementServer) DeleteChatAdmin(context.Context, *DeleteAdminRequest) (*ChatRoomWithAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatAdmin not implemented")
}
func (UnimplementedChatManagementServer) IsChatAdmin(context.Context, *IsAdminRequest) (*IsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsChatAdmin not implemented")
}
func (UnimplementedChatManagementServer) GetChatUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatUsers not implemented")
}
func (UnimplementedChatManagementServer) mustEmbedUnimplementedChatManagementServer() {}

// UnsafeChatManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatManagementServer will
// result in compilation errors.
type UnsafeChatManagementServer interface {
	mustEmbedUnimplementedChatManagementServer()
}

func RegisterChatManagementServer(s grpc.ServiceRegistrar, srv ChatManagementServer) {
	s.RegisterService(&ChatManagement_ServiceDesc, srv)
}

func _ChatManagement_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).DeleteChat(ctx, req.(*DeleteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_UpdateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).UpdateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/UpdateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).UpdateChat(ctx, req.(*UpdateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/JoinChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).LeaveChat(ctx, req.(*LeaveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).KickUser(ctx, req.(*KickUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_CanWriteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).CanWriteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/CanWriteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).CanWriteChat(ctx, req.(*CanWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_MakeChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).MakeChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/MakeChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).MakeChatAdmin(ctx, req.(*MakeAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_DeleteChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).DeleteChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/DeleteChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).DeleteChatAdmin(ctx, req.(*DeleteAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_IsChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).IsChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/IsChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).IsChatAdmin(ctx, req.(*IsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatManagement_GetChatUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatManagementServer).GetChatUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_mgmt.ChatManagement/GetChatUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatManagementServer).GetChatUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatManagement_ServiceDesc is the grpc.ServiceDesc for ChatManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_mgmt.ChatManagement",
	HandlerType: (*ChatManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatManagement_CreateChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _ChatManagement_DeleteChat_Handler,
		},
		{
			MethodName: "UpdateChat",
			Handler:    _ChatManagement_UpdateChat_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _ChatManagement_JoinChat_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _ChatManagement_LeaveChat_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _ChatManagement_InviteUser_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _ChatManagement_KickUser_Handler,
		},
		{
			MethodName: "CanWriteChat",
			Handler:    _ChatManagement_CanWriteChat_Handler,
		},
		{
			MethodName: "MakeChatAdmin",
			Handler:    _ChatManagement_MakeChatAdmin_Handler,
		},
		{
			MethodName: "DeleteChatAdmin",
			Handler:    _ChatManagement_DeleteChatAdmin_Handler,
		},
		{
			MethodName: "IsChatAdmin",
			Handler:    _ChatManagement_IsChatAdmin_Handler,
		},
		{
			MethodName: "GetChatUsers",
			Handler:    _ChatManagement_GetChatUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_mgmt/chat_mgmt.proto",
}
